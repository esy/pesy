// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require('bs-platform/lib/js/curry.js');
var Printf = require('bs-platform/lib/js/printf.js');
var Caml_array = require('bs-platform/lib/js/caml_array.js');
var Caml_int32 = require('bs-platform/lib/js/caml_int32.js');
var Js_null_undefined = require('bs-platform/lib/js/js_null_undefined.js');
var Caml_chrome_debugger = require('bs-platform/lib/js/caml_chrome_debugger.js');

var frames = /* array */ ['-', '\\', '|', '/'];

var n_frames = frames.length;

function start(msg) {
  var i = {
    contents: 0,
  };
  return setInterval(function(param) {
    Curry._2(
      Printf.printf(
        /* Format */ Caml_chrome_debugger.simpleVariant('Format', [
          /* String */ Caml_chrome_debugger.variant('String', 2, [
            /* No_padding */ 0,
            /* Char_literal */ Caml_chrome_debugger.variant(
              'Char_literal',
              12,
              [
                /* " " */ 32,
                /* String */ Caml_chrome_debugger.variant('String', 2, [
                  /* No_padding */ 0,
                  /* String_literal */ Caml_chrome_debugger.variant(
                    'String_literal',
                    11,
                    [
                      '                                                                                    \r\r',
                      /* End_of_format */ 0,
                    ]
                  ),
                ]),
              ]
            ),
          ]),
          '%s %s                                                                                    \r\r',
        ])
      ),
      msg,
      Caml_array.caml_array_get(frames, Caml_int32.mod_(i.contents, n_frames))
    );
    i.contents = (i.contents + 1) | 0;
    return /* () */ 0;
  }, 120);
}

function stop(spinnerIntervalID) {
  Printf.printf(
    /* Format */ Caml_chrome_debugger.simpleVariant('Format', [
      /* String_literal */ Caml_chrome_debugger.variant('String_literal', 11, [
        '                                                                                       \r\r',
        /* End_of_format */ 0,
      ]),
      '                                                                                       \r\r',
    ])
  );
  var intervalID = spinnerIntervalID;
  return Js_null_undefined.iter(intervalID, function(intervalId) {
    clearInterval(intervalId);
    return /* () */ 0;
  });
}

function clearLine(param) {
  console.log('\n');
  return /* () */ 0;
}

exports.start = start;
exports.stop = stop;
exports.clearLine = clearLine;
/* No side effect */
