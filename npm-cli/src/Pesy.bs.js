// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Process = require("process");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Filename = require("bs-platform/lib/js/filename.js");
var Child_process = require("child_process");
var Path$PesyBootstrapper = require("./Path.bs.js");
var Utils$PesyBootstrapper = require("./Utils.bs.js");
var Spinner$PesyBootstrapper = require("./Spinner.bs.js");

var projectPath = Process.cwd();

var packageNameKebab = Utils$PesyBootstrapper.kebab(Curry._1(Filename.basename, projectPath));

var packageNameKebabSansScope = Utils$PesyBootstrapper.removeScope(packageNameKebab);

var packageNameUpperCamelCase = Utils$PesyBootstrapper.upperCamelCasify(packageNameKebabSansScope);

var version = "0.0.0";

var packageJSONTemplate = Utils$PesyBootstrapper.loadTemplate("pesy-package.template.json");

var appReTemplate = Utils$PesyBootstrapper.loadTemplate("pesy-App.template.re");

var testReTemplate = Utils$PesyBootstrapper.loadTemplate("pesy-Test.template.re");

var runTestsTemplate = Utils$PesyBootstrapper.loadTemplate("pesy-RunTests.template.re");

var testFrameworkTemplate = Utils$PesyBootstrapper.loadTemplate("pesy-TestFramework.template.re");

var utilRe = Utils$PesyBootstrapper.loadTemplate("pesy-Util.template.re");

var readMeTemplate = Utils$PesyBootstrapper.loadTemplate("pesy-README.template.md");

var gitignoreTemplate = Utils$PesyBootstrapper.loadTemplate("pesy-gitignore.template");

var esyBuildStepsTemplate = Utils$PesyBootstrapper.loadTemplate(Path$PesyBootstrapper.$slash("azure-pipeline-templates", "pesy-esy-build-steps.template.yml"));

var packageLibName = packageNameKebabSansScope + "/library";

var packageTestName = packageNameKebabSansScope + "/test";

function substituteTemplateValues(s) {
  return s.replace((/<PACKAGE_NAME_FULL>/g), packageNameKebab).replace((/<VERSION>/g), version).replace((/<PUBLIC_LIB_NAME>/g), packageLibName).replace((/<TEST_LIB_NAME>/g), packageTestName).replace((/<PACKAGE_NAME>/g), packageNameKebab).replace((/<PACKAGE_NAME_UPPER_CAMEL>/g), packageNameUpperCamelCase);
}

if (!Utils$PesyBootstrapper.exists("package.json")) {
  var packageJSON = substituteTemplateValues(packageJSONTemplate);
  Utils$PesyBootstrapper.write("package.json", packageJSON);
}

var appReDir = Path$PesyBootstrapper.$slash(projectPath, "executable");

var appRePath = Path$PesyBootstrapper.$slash(appReDir, packageNameUpperCamelCase) + "App.re";

if (!Utils$PesyBootstrapper.exists(appRePath)) {
  var appRe = substituteTemplateValues(appReTemplate);
  Utils$PesyBootstrapper.mkdirp(appReDir);
  Utils$PesyBootstrapper.write(appRePath, appRe);
}

var utilReDir = Path$PesyBootstrapper.$slash(projectPath, "library");

var utilRePath = Path$PesyBootstrapper.$slash(utilReDir, "Util.re");

if (!Utils$PesyBootstrapper.exists(utilRePath)) {
  Utils$PesyBootstrapper.mkdirp(utilReDir);
  Utils$PesyBootstrapper.write(utilRePath, utilRe);
}

var testReDir = Path$PesyBootstrapper.$slash(projectPath, "test");

if (!Utils$PesyBootstrapper.exists(testReDir)) {
  Utils$PesyBootstrapper.mkdirp(testReDir);
}

var testRePath = Path$PesyBootstrapper.$slash(testReDir, "Test") + (packageNameUpperCamelCase + ".re");

if (!Utils$PesyBootstrapper.exists(testRePath)) {
  var testRe = substituteTemplateValues(testReTemplate);
  Utils$PesyBootstrapper.write(testRePath, testRe);
}

var testFrameworkPath = Path$PesyBootstrapper.$slash(testReDir, "TestFramework.re");

if (!Utils$PesyBootstrapper.exists(testFrameworkPath)) {
  var testFramework = substituteTemplateValues(testFrameworkTemplate);
  Utils$PesyBootstrapper.write(testFrameworkPath, testFramework);
}

var testExeDir = Path$PesyBootstrapper.$slash(projectPath, "testExe");

if (!Utils$PesyBootstrapper.exists(testExeDir)) {
  Utils$PesyBootstrapper.mkdirp(testExeDir);
}

var testExeFileName = substituteTemplateValues("Run<PACKAGE_NAME_UPPER_CAMEL>Tests.re");

var runTestsPath = Path$PesyBootstrapper.$slash(testExeDir, testExeFileName);

if (!Utils$PesyBootstrapper.exists(runTestsPath)) {
  var runTests = substituteTemplateValues(runTestsTemplate);
  Utils$PesyBootstrapper.write(runTestsPath, runTests);
}

var readMePath = Path$PesyBootstrapper.$slash(projectPath, "README.md");

if (!Utils$PesyBootstrapper.exists(readMePath)) {
  var readMe = substituteTemplateValues(readMeTemplate);
  Utils$PesyBootstrapper.write(readMePath, readMe);
}

var gitignorePath = Path$PesyBootstrapper.$slash(projectPath, ".gitignore");

if (!Utils$PesyBootstrapper.exists(gitignorePath)) {
  var gitignore = substituteTemplateValues(gitignoreTemplate);
  Utils$PesyBootstrapper.write(".gitignore", gitignore);
}

var azurePipelinesPath = Path$PesyBootstrapper.$slash(projectPath, "azure-pipelines.yml");

if (!Utils$PesyBootstrapper.exists(azurePipelinesPath)) {
  var esyBuildSteps = substituteTemplateValues(esyBuildStepsTemplate);
  Utils$PesyBootstrapper.copyTemplate(Path$PesyBootstrapper.$slash("azure-pipeline-templates", "pesy-azure-pipelines.yml"), Path$PesyBootstrapper.$slash(projectPath, "azure-pipelines.yml"));
  Utils$PesyBootstrapper.mkdirp(".ci");
  var ciFilesPath = Path$PesyBootstrapper.$slash(projectPath, ".ci");
  Utils$PesyBootstrapper.write(Path$PesyBootstrapper.$slash(ciFilesPath, "esy-build-steps.yml"), esyBuildSteps);
  Utils$PesyBootstrapper.copyTemplate(Path$PesyBootstrapper.$slash("azure-pipeline-templates", "pesy-publish-build-cache.yml"), Path$PesyBootstrapper.$slash(ciFilesPath, "publish-build-cache.yml"));
  Utils$PesyBootstrapper.copyTemplate(Path$PesyBootstrapper.$slash("azure-pipeline-templates", "pesy-restore-build-cache.yml"), Path$PesyBootstrapper.$slash(ciFilesPath, "restore-build-cache.yml"));
}

var duneProjectFile = Path$PesyBootstrapper.$slash(projectPath, "dune-project");

if (!Utils$PesyBootstrapper.exists(duneProjectFile)) {
  Utils$PesyBootstrapper.write(duneProjectFile, Curry._1(Utils$PesyBootstrapper.spf(/* Format */[
                /* String_literal */Block.__(11, [
                    "(lang dune 1.2)\n(name ",
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            ")\n",
                            /* End_of_format */0
                          ])
                      ])
                  ]),
                "(lang dune 1.2)\n(name %s)\n"
              ]), packageNameKebabSansScope));
}

var opamFileName = packageNameKebabSansScope + ".opam";

var opamFile = Path$PesyBootstrapper.$slash(projectPath, opamFileName);

if (!Utils$PesyBootstrapper.exists(opamFile)) {
  Utils$PesyBootstrapper.write(opamFile, "");
}

var rootDuneFile = Path$PesyBootstrapper.$slash(projectPath, "dune");

if (!Utils$PesyBootstrapper.exists(rootDuneFile)) {
  Utils$PesyBootstrapper.write(rootDuneFile, "(ignored_subdirs (node_modules))");
}

var id = Spinner$PesyBootstrapper.start("\x1b[2mRunning\x1b[0m esy install");

Child_process.exec("esy i", (function (e, stdout, stderr) {
        Spinner$PesyBootstrapper.stop(id);
        if (Caml_obj.caml_equal_nullable(e, null)) {
          var id$1 = Spinner$PesyBootstrapper.start("\x1b[2mRunning\x1b[0m esy pesy");
          Child_process.exec("esy pesy", (function (e, stdout, stderr) {
                  Spinner$PesyBootstrapper.stop(id$1);
                  if (Caml_obj.caml_equal_nullable(e, null)) {
                    var id$2 = Spinner$PesyBootstrapper.start("\x1b[2mRunning\x1b[0m esy build");
                    Child_process.exec("esy build", (function (e, stdout, stderr) {
                            Spinner$PesyBootstrapper.stop(id$2);
                            if (Caml_obj.caml_equal_nullable(e, null)) {
                              return Printf.printf(/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "You may now run \x1b[32m'esy test'\x1b[0m\n",
                                              /* End_of_format */0
                                            ]),
                                          "You may now run \x1b[32m'esy test'\x1b[0m\n"
                                        ]);
                            } else {
                              Printf.printf(/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "'esy build' \x1b[31mfailed.\x1b[0m Could not build project.\nLogs can be found in pesy.stdout.log and pesy.stderr.log\n",
                                        /* End_of_format */0
                                      ]),
                                    "'esy build' \x1b[31mfailed.\x1b[0m Could not build project.\nLogs can be found in pesy.stdout.log and pesy.stderr.log\n"
                                  ]);
                              Utils$PesyBootstrapper.write("pesy.stdout.log", stdout);
                              return Utils$PesyBootstrapper.write("pesy.stderr.log", stderr);
                            }
                          }));
                    return /* () */0;
                  } else {
                    Printf.printf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "'esy pesy' \x1b[31mfailed.\x1b[0m Dune files could not be created.\n Logs can be found in pesy.stdout.log and pesy.stderr.log\n",
                              /* End_of_format */0
                            ]),
                          "'esy pesy' \x1b[31mfailed.\x1b[0m Dune files could not be created.\n Logs can be found in pesy.stdout.log and pesy.stderr.log\n"
                        ]);
                    Utils$PesyBootstrapper.write("pesy.stdout.log", stdout);
                    return Utils$PesyBootstrapper.write("pesy.stderr.log", stderr);
                  }
                }));
          return /* () */0;
        } else {
          Printf.printf(/* Format */[
                /* String_literal */Block.__(11, [
                    "'esy install' \x1b[31mfailed.\x1b[0m Dependencies could not be installed.\nLogs can be found in pesy.stdout.log and pesy.stderr.log\n",
                    /* End_of_format */0
                  ]),
                "'esy install' \x1b[31mfailed.\x1b[0m Dependencies could not be installed.\nLogs can be found in pesy.stdout.log and pesy.stderr.log\n"
              ]);
          Utils$PesyBootstrapper.write("pesy.stdout.log", stdout);
          return Utils$PesyBootstrapper.write("pesy.stderr.log", stderr);
        }
      }));

var libKebab = packageNameKebabSansScope;

exports.projectPath = projectPath;
exports.packageNameKebab = packageNameKebab;
exports.packageNameKebabSansScope = packageNameKebabSansScope;
exports.packageNameUpperCamelCase = packageNameUpperCamelCase;
exports.version = version;
exports.packageJSONTemplate = packageJSONTemplate;
exports.appReTemplate = appReTemplate;
exports.testReTemplate = testReTemplate;
exports.runTestsTemplate = runTestsTemplate;
exports.testFrameworkTemplate = testFrameworkTemplate;
exports.utilRe = utilRe;
exports.readMeTemplate = readMeTemplate;
exports.gitignoreTemplate = gitignoreTemplate;
exports.esyBuildStepsTemplate = esyBuildStepsTemplate;
exports.packageLibName = packageLibName;
exports.packageTestName = packageTestName;
exports.substituteTemplateValues = substituteTemplateValues;
exports.appReDir = appReDir;
exports.appRePath = appRePath;
exports.utilReDir = utilReDir;
exports.utilRePath = utilRePath;
exports.testReDir = testReDir;
exports.testRePath = testRePath;
exports.testFrameworkPath = testFrameworkPath;
exports.testExeDir = testExeDir;
exports.testExeFileName = testExeFileName;
exports.runTestsPath = runTestsPath;
exports.readMePath = readMePath;
exports.gitignorePath = gitignorePath;
exports.azurePipelinesPath = azurePipelinesPath;
exports.libKebab = libKebab;
exports.duneProjectFile = duneProjectFile;
exports.opamFileName = opamFileName;
exports.opamFile = opamFile;
exports.rootDuneFile = rootDuneFile;
exports.id = id;
/* projectPath Not a pure module */
