// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Filename = require("bs-platform/lib/js/filename.js");
var Tablecloth = require("tablecloth-bucklescript/src/tablecloth.bs.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Path$PesyBootstrapper = require("./Path.bs.js");

var Caml = /* module */[
  /* List */0,
  /* String */0
];

function exists(prim) {
  return Fs.existsSync(prim);
}

function write(file, str) {
  Fs.writeFileSync(file, str, "utf8");
  return /* () */0;
}

function readFile(file) {
  return Fs.readFileSync(file, "utf8");
}

function copyTemplate(a, b) {
  return write(b, Fs.readFileSync(Path$PesyBootstrapper.$slash(Path$PesyBootstrapper.$slash(Path$PesyBootstrapper.$slash(__dirname, "share"), "template-repo"), a), "utf8"));
}

function kebab(str) {
  var charStrings = Tablecloth.$$String[/* split */10]("", str);
  var k = Tablecloth.$$String[/* concat */33](Tablecloth.List[/* map */4]((function (c) {
              var c$1 = Caml_string.get(c, 0);
              if (Tablecloth.Char[/* isUppercase */16](c$1)) {
                return "-" + Tablecloth.Char[/* toString */4](Tablecloth.Char[/* toLowercase */10](c$1));
              } else {
                return Tablecloth.Char[/* toString */4](c$1);
              }
            }), charStrings));
  if (List.hd(Tablecloth.$$String[/* toList */29](k)) === /* "-" */45) {
    return $$String.sub(k, 1, Tablecloth.$$String[/* length */0](k) - 1 | 0);
  } else {
    return k;
  }
}

function removeScope(kebab) {
  return kebab.replace((/[^\\/]*\//g), "");
}

function upperCamelCasify(kebab) {
  var parts = Tablecloth.$$String[/* split */10]("-", kebab);
  var k = $$String.concat("", Tablecloth.List[/* map */4](Tablecloth.$$String[/* capitalize */21], parts));
  if (Caml_string.get(k, 0) === /* "-" */45) {
    return $$String.sub(k, 1, Tablecloth.$$String[/* length */0](k) - 1 | 0);
  } else {
    return k;
  }
}

function loadTemplate(name) {
  return Fs.readFileSync(Path$PesyBootstrapper.$slash(Path$PesyBootstrapper.$slash(Path$PesyBootstrapper.$slash(__dirname, "share"), "template-repo"), name), "utf8");
}

function mkdirp(p) {
  var directory_created = Fs.existsSync(p);
  if (directory_created) {
    return 0;
  } else {
    mkdirp(Curry._1(Filename.dirname, p));
    Fs.mkdirSync(p);
    return /* () */0;
  }
}

function renderAsciiTree(dir, name, namespace, $$require, isLast) {
  if (isLast) {
    return Curry._3(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "\xe2\x94\x82\\n\xe2\x94\x94\xe2\x94\x80 ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "\\n   ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        "\\n   ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* String_literal */Block.__(11, [
                                                "\\n",
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "\xe2\x94\x82\\n\xe2\x94\x94\xe2\x94\x80 %s\\n   %s\\n   %s\\n"
                  ]), dir, name, namespace);
  } else {
    var match = $$require === "";
    return Curry._3(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "\xe2\x94\x82\\n\xe2\x94\x9c\xe2\x94\x80 ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "\\n\xe2\x94\x82  ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        "\\n\xe2\x94\x82  ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* String_literal */Block.__(11, [
                                                "\\n",
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "\xe2\x94\x82\\n\xe2\x94\x9c\xe2\x94\x80 %s\\n\xe2\x94\x82  %s\\n\xe2\x94\x82  %s\\n"
                  ]), dir, name, namespace) + (
            match ? "" : (
                isLast ? "   " : "\xe2\x94\x82  "
              ) + $$require
          );
  }
}

var RenderAsciiTreeChildrenError = Caml_exceptions.create("Utils-PesyBootstrapper.RenderAsciiTreeChildrenError");

function renderAscTreeChildren(param) {
  if (param) {
    var firstChildLog = Curry._1(Printf.sprintf(/* Format */[
              /* String_literal */Block.__(11, [
                  "\xe2\x94\x9c\xe2\x94\x80 ",
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* End_of_format */0
                    ])
                ]),
              "\xe2\x94\x9c\xe2\x94\x80 %s"
            ]), param[0]);
    var restChildrenLog = List.map((function (c) {
            return Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "\xe2\x94\x82  ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "\xe2\x94\x82  %s"
                          ]), c);
          }), param[1]);
    return Tablecloth.$$String[/* join */11]("\n", /* :: */[
                "\xe2\x94\x82",
                /* :: */[
                  firstChildLog,
                  restChildrenLog
                ]
              ]);
  } else {
    throw [
          RenderAsciiTreeChildrenError,
          "Tree cannot have zero children"
        ];
  }
}

function renderAscLastTree(param) {
  if (param) {
    var firstChildLog = Curry._1(Printf.sprintf(/* Format */[
              /* String_literal */Block.__(11, [
                  "\xe2\x94\x94\xe2\x94\x80 ",
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* End_of_format */0
                    ])
                ]),
              "\xe2\x94\x94\xe2\x94\x80 %s"
            ]), param[0]);
    var restChildrenLog = List.map((function (c) {
            return Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "   ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "   %s"
                          ]), c);
          }), param[1]);
    return Tablecloth.$$String[/* join */11]("\n", /* :: */[
                "\xe2\x94\x82",
                /* :: */[
                  firstChildLog,
                  restChildrenLog
                ]
              ]);
  } else {
    throw [
          RenderAsciiTreeChildrenError,
          "Tree cannot have zero children"
        ];
  }
}

function renderAscTree(_param) {
  while(true) {
    var param = _param;
    if (param) {
      var rest = param[1];
      var t = param[0];
      if (rest) {
        console.log(renderAscTreeChildren(t));
        _param = rest;
        continue ;
      } else {
        console.log(renderAscLastTree(t));
        return /* () */0;
      }
    } else {
      return /* () */0;
    }
  };
}

var spf = Printf.sprintf;

var parent = Filename.dirname;

exports.Caml = Caml;
exports.spf = spf;
exports.exists = exists;
exports.write = write;
exports.readFile = readFile;
exports.parent = parent;
exports.copyTemplate = copyTemplate;
exports.kebab = kebab;
exports.removeScope = removeScope;
exports.upperCamelCasify = upperCamelCasify;
exports.loadTemplate = loadTemplate;
exports.mkdirp = mkdirp;
exports.renderAsciiTree = renderAsciiTree;
exports.RenderAsciiTreeChildrenError = RenderAsciiTreeChildrenError;
exports.renderAscTreeChildren = renderAscTreeChildren;
exports.renderAscLastTree = renderAscLastTree;
exports.renderAscTree = renderAscTree;
/* fs Not a pure module */
