Rely list matchers › toContain › expect.list.not.toContain failure output
Running 1 test suite
<red><bold><inverse> FAIL </inverse></bold></red> <whiteBright>expect.list.not.toContain failure output</whiteBright>
<bold><red>  \226\128\162 expect.list.not.toContain failure output \226\128\186 integer contains</red></bold>

    <dim>expect.list(</dim><red>list</red><dim>).</dim>not<dim>.toContain(</dim><green>value</green><dim>)</dim> <dim>/* using === */</dim>
    
    Expected list:
      <red>[1, 2, 3]</red>
    Not to contain value: 
      <green>1</green>

<bold><red>  \226\128\162 expect.list.not.toContain failure output \226\128\186 string reference equality</red></bold>

    <dim>expect.list(</dim><red>list</red><dim>).</dim>not<dim>.toContain(</dim><green>value</green><dim>)</dim> <dim>/* using === */</dim>
    
    Expected list:
      <red>[\"string\", \"bacon\"]</red>
    Not to contain value: 
      <green>string</green>
    
    <dim>Note that you are testing for referential equality between strings. You probably need to use `toContainEqual` instead.</dim>

<bold><red>  \226\128\162 expect.list.not.toContain failure output \226\128\186 record reference equality</red></bold>

    <dim>expect.list(</dim><red>list</red><dim>).</dim>not<dim>.toContain(</dim><green>value</green><dim>)</dim> <dim>/* using === */</dim>
    
    Expected list:
      <red>[{\"Tom\", 42}, {\"Jerry\", 100}]</red>
    Not to contain value: 
      <green>{\"Tom\", 42}</green>


<whiteBright><bold>Test Suites: </bold></whiteBright><red><bold>1 failed</bold></red>, 0 passed, 1 total
<whiteBright><bold>Tests:       </bold></whiteBright><red><bold>3 failed</bold></red>, 0 passed, 3 total
<whiteBright><bold>Time:        </bold></whiteBright>< 1ms

